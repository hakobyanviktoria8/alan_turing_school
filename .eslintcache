[{"C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\index.js":"1","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\App.js":"2","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\constants\\apiConstants.js":"3","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\SignUpSuccess\\SignUpSuccess.js":"4","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\SignUp\\SignUp.js":"5","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\SignUp\\ModalComponent.js":"6","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\SignIn\\SignIn.js":"7","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\MainPage\\Mainpage.js":"8","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\MainPage\\MainPage.js":"9","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\MainPage\\SidebarLeft\\SidebarLeft.jsx":"10","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\MainPage\\SidebarTop\\SidebarTop.js":"11","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\MainPage\\MainContent\\MainContent.js":"12"},{"size":229,"mtime":1619123276999,"results":"13","hashOfConfig":"14"},{"size":944,"mtime":1616885650191,"results":"15","hashOfConfig":"14"},{"size":61,"mtime":1613900019183,"results":"16","hashOfConfig":"14"},{"size":2566,"mtime":1614468431655,"results":"17","hashOfConfig":"14"},{"size":8922,"mtime":1619123536200,"results":"18","hashOfConfig":"14"},{"size":1418,"mtime":1613333292658,"results":"19","hashOfConfig":"14"},{"size":5130,"mtime":1619123574341,"results":"20","hashOfConfig":"14"},{"size":677,"mtime":1616899775614,"results":"21","hashOfConfig":"14"},{"size":417,"mtime":1617377499525,"results":"22","hashOfConfig":"14"},{"size":1342,"mtime":1616894640828,"results":"23","hashOfConfig":"14"},{"size":1412,"mtime":1616887999454,"results":"24","hashOfConfig":"14"},{"size":1209,"mtime":1616888415722,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"d203xp",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\index.js",[],["55","56"],"C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\App.js",[],"C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\constants\\apiConstants.js",[],["57","58"],"C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\SignUpSuccess\\SignUpSuccess.js",[],"C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\SignUp\\SignUp.js",["59"],"import React from \"react\";\r\nimport {Container, Row, Col} from 'reactstrap';\r\nimport \"./SignUp.css\";\r\nimport logo from \"./../img/logo.png\";\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport ModalComponent from \"./ModalComponent\";\r\nimport {useForm} from \"react-hook-form\";\r\n// import axios from \"axios\";\r\nimport {sha256} from 'js-sha256';\r\n// import {API_BASE_URL} from '../constants/apiConstants';\r\n\r\nexport function SignUp(props) {\r\n    const {register, handleSubmit, errors, watch, setError} = useForm({mode: 'onChange'});\r\n    let history = useHistory();\r\n\r\n    const onSubmit = data => {\r\n        const payload = {\r\n            \"mail\": data.email,\r\n            \"password\": sha256.create().update(data.password).hex(),\r\n        };\r\n        history.push(\"/SignUpSuccess\");\r\n        console.log(payload);\r\n\r\n        // axios.post(API_BASE_URL + '/User', payload)\r\n        //     .then(function (response) {\r\n        //         if (response.status === 200) {\r\n        //             history.push(\"/SignUpSuccess\");\r\n        //         } else {\r\n        //             console.log(errors)\r\n        //         }\r\n        //     })\r\n        //     .catch(function (error) {\r\n        //         if (error.response.status === 409) {\r\n        //             setError(\"email\", {message: \"Email is already used\"});\r\n        //         }\r\n        //     });\r\n    };\r\n\r\n    return (\r\n        <Container fluid className={\"SignUP\"}>\r\n            <Row>\r\n                <Col lg={\"7\"} md={\"7\"} className={\"p-0\"}>\r\n                    <div className={\"bgSignUp\"}>\r\n                        <div className={\"logoWrap\"}>\r\n                            <img src={logo} alt=\"\"/>\r\n                        </div>\r\n                        <div className={\"headerLeftText\"}>\r\n                            <h1>Lorem Ipsum </h1>\r\n                            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.\r\n                                Consequuntur ex officia officiis possimus.\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n                <Col lg={\"5\"} md={\"5\"} className={\"p-0\"}>\r\n                    <div className={\"headerRightText\"}>\r\n                        <div>\r\n                            <h2>Sign Up</h2>\r\n                        </div>\r\n                        <div>\r\n                            <form onSubmit={handleSubmit(onSubmit)} noValidate autoComplete=\"off\" method={\"post\"}>\r\n                                <Row>\r\n                                    <Col lg={12}>\r\n                                        <input\r\n                                            ref={register({\r\n                                                required: \"Email is required\",\r\n                                                minLength: {\r\n                                                    value: 10,\r\n                                                    message: \"Min length 10 character.\"\r\n                                                },\r\n                                                maxLength: {\r\n                                                    value: 50,\r\n                                                    message: \"Max length 50 character.\"\r\n                                                },\r\n                                                validate: (value) => {\r\n                                                    return (\r\n                                                        [/^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/].every(pattern => pattern.test(value)) ||\r\n                                                        \"Invalid email.\"\r\n                                                    )\r\n                                                }\r\n                                            })}\r\n                                            name={\"email\"}\r\n                                            className={\"input\"}\r\n                                            type=\"email\"\r\n                                            placeholder={\"Email\"}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                {errors.email ? <span>{errors.email.message}</span> : null}\r\n                                <br/>\r\n                                <Row>\r\n                                    <Col lg={12}>\r\n                                        <input\r\n                                            ref={register({\r\n                                                required: \"Password is required\",\r\n                                                minLength: {\r\n                                                    value: 8,\r\n                                                    message: \"Min length 8 character.\"\r\n                                                },\r\n                                                maxLength: {\r\n                                                    value: 20,\r\n                                                    message: \"Max length 20 character.\"\r\n                                                },\r\n                                                validate: (value) => {\r\n                                                    return (\r\n                                                        [/^((?!.*[\\s])(?=.*[A-Z])(?=.*[a-z])(?=.*\\d))/].every(pattern => pattern.test(value)) ||\r\n                                                        \"The password must contain uppercase, lowercase and number.\"\r\n                                                    )\r\n                                                }\r\n                                            })}\r\n                                            name={\"password\"}\r\n                                            className={\"input\"}\r\n                                            type=\"password\"\r\n                                            placeholder={\"Password\"}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                {errors.password ? <span>{errors.password.message}</span> : null}\r\n                                <br/>\r\n                                <Row>\r\n                                    <Col lg={12}>\r\n                                        <input\r\n                                            ref={register({\r\n                                                required: \"Confirm Password is required\",\r\n                                                validate: value => value === watch('password') ? null : \"Do not match passwords\"\r\n\r\n                                            })}\r\n\r\n                                            name={\"confirmPassword\"}\r\n                                            className={\"input\"}\r\n                                            type=\"password\"\r\n                                            placeholder={\"Confirm Password\"}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                {errors.confirmPassword ? <span>{errors.confirmPassword.message}</span> : null}\r\n                                <br/>\r\n                                <Row>\r\n                                    <Col lg={12} className={\"d-flex agreeToRules\"}>\r\n                                        <label className={\"m-0\"}>\r\n                                            <input\r\n                                                ref={register({\r\n                                                    required: \"Are you agree\"\r\n                                                })}\r\n                                                name={\"checkedbtn\"}\r\n                                                type=\"checkbox\"\r\n                                            />\r\n                                            I accept the\r\n                                        </label>\r\n                                        <ModalComponent title={\"Terms of Use\"}/> &\r\n                                        <ModalComponent title={\"Privacy Policy\"}/>\r\n\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                {errors.checkedbtn ? <span>{errors.checkedbtn.message}</span> : null}\r\n                                <br/>\r\n                                <br/>\r\n                                <input className={\"input\"} type=\"submit\" value=\"Sign Up\"/>\r\n                            </form>\r\n                        </div>\r\n                        <div className={\"signUpWraper text-center mt-3\"}>\r\n                            <p>Already have an account?\r\n                                <Link to=\"/SignIn\"> Sign In</Link>\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\n","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\SignUp\\ModalComponent.js",[],"C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\SignIn\\SignIn.js",["60","61","62","63"],"import React from \"react\";\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport \"./../SignUp/SignUp.css\";\r\nimport logo from \"./../img/logo.png\";\r\nimport axios from \"axios/index\";\r\nimport {sha256} from \"js-sha256\";\r\nimport {useForm} from \"react-hook-form/dist/index\";\r\nimport  { Link, useHistory } from \"react-router-dom\";\r\n// import {API_BASE_URL} from '../constants/apiConstants';\r\n\r\nexport function SignIn(props) {\r\n    const { register, handleSubmit, errors, setError } = useForm({mode: 'onChange'});\r\n    let history = useHistory();\r\n\r\n    const onSubmit = data => {\r\n        history.push(\"/main-page\");\r\n\r\n\r\n        const payload= {\r\n            \"mail\": data.email,\r\n            \"password\": sha256.create().update(data.password).hex(),\r\n        };\r\n\r\n        // axios.post(API_BASE_URL + '/User/LogIn', payload)\r\n        //     .then(function (response) {\r\n        //         if(response.status === 200){\r\n        //             history.push(\"/main-page\");\r\n        //         } else {\r\n        //             console.log(errors)\r\n        //         }\r\n        //     })\r\n        //     .catch(function (error) {\r\n        //         if (error.response.status === 401) {\r\n        //             setError(\"password\", {message: \"Incorrect email or password\"});\r\n        //         }\r\n        //     });\r\n    };\r\n\r\n\r\n    return (\r\n        <div className = {\"SignUpSuccess\"}>\r\n            <Container fluid className = {\"SignUP\"}>\r\n                <Row>\r\n                    <Col lg = {\"7\"} className = {\"p-0\"}>\r\n                        <div className = {\"bgSignUp\"}>\r\n                            <div className = {\"logoWrap\"}>\r\n                                <img src = {logo} alt = \"\"/>\r\n                            </div>\r\n                            <div className = {\"headerLeftText\"}>\r\n                                <h1>Welcome Back</h1>\r\n                                <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.\r\n                                    Consequuntur ex officia officiis possimus.\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                    <Col lg = {\"5\"}>\r\n                        <div className = {\"headerRightText\"}>\r\n                            <div>\r\n                                <h2>Sign In</h2>\r\n                            </div>\r\n                            <div>\r\n                                <form onSubmit={handleSubmit(onSubmit)} noValidate autoComplete=\"off\" method={\"post\"}>\r\n                                    <Row>\r\n                                        <Col lg={12}>\r\n                                            <input\r\n                                                ref = {register({\r\n                                                    required: \"Email is required\"})\r\n                                                }\r\n                                                name={\"email\"}\r\n                                                className={\"input\"}\r\n                                                type=\"email\"\r\n                                                placeholder={\"Email\"}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    {errors.email ? <span>{errors.email.message}</span> : null}\r\n                                    <br/>\r\n                                    <Row>\r\n                                        <Col lg={12}>\r\n                                            <input\r\n                                                ref = {register({\r\n                                                    required: \"Password is required\"\r\n                                                })}\r\n                                                name={\"password\"}\r\n                                                className={\"input\"}\r\n                                                type=\"password\"\r\n                                                placeholder={\"Password\"}\r\n                                             />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    {errors.password ? <span>{errors.password.message}</span> : null}\r\n                                    <br/>\r\n                                    <a href = \"\">Forgot Password?</a>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    <label className = {\"signInBtn\"}>\r\n                                        <input className = {\"input\"} type = \"submit\" value = \"Sign In\" />\r\n                                    </label>\r\n                                </form>\r\n                            </div>\r\n                            <div  className={\"text-center\"}>\r\n                                <p>New user <Link to = \"/SignUp\">Sign Up</Link></p>\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\MainPage\\Mainpage.js",[],["64","65"],"C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\MainPage\\MainPage.js",[],"C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\MainPage\\SidebarLeft\\SidebarLeft.jsx",[],"C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\MainPage\\SidebarTop\\SidebarTop.js",[],"C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\MainPage\\MainContent\\MainContent.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"66","replacedBy":"70"},{"ruleId":"68","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":13,"column":51,"nodeType":"74","messageId":"75","endLine":13,"endColumn":59},{"ruleId":"72","severity":1,"message":"76","line":5,"column":8,"nodeType":"74","messageId":"75","endLine":5,"endColumn":13},{"ruleId":"72","severity":1,"message":"73","line":12,"column":45,"nodeType":"74","messageId":"75","endLine":12,"endColumn":53},{"ruleId":"72","severity":1,"message":"77","line":19,"column":15,"nodeType":"74","messageId":"75","endLine":19,"endColumn":22},{"ruleId":"78","severity":1,"message":"79","line":94,"column":37,"nodeType":"80","endLine":94,"endColumn":50},{"ruleId":"66","replacedBy":"81"},{"ruleId":"68","replacedBy":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],["83"],["84"],"no-unused-vars","'setError' is assigned a value but never used.","Identifier","unusedVar","'axios' is defined but never used.","'payload' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["83"],["84"],"no-global-assign","no-unsafe-negation"]