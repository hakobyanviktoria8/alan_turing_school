[{"C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\index.js":"1","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\App.js":"2","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\constants\\apiConstants.js":"3","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\SignUpSuccess\\SignUpSuccess.js":"4","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\SignUp\\SignUp.js":"5","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\SignUp\\ModalComponent.js":"6","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\SignIn\\SignIn.js":"7"},{"size":225,"mtime":1613083587876,"results":"8","hashOfConfig":"9"},{"size":799,"mtime":1614471476524,"results":"10","hashOfConfig":"9"},{"size":61,"mtime":1613900019183,"results":"11","hashOfConfig":"9"},{"size":2566,"mtime":1614468431655,"results":"12","hashOfConfig":"9"},{"size":9191,"mtime":1614966995009,"results":"13","hashOfConfig":"9"},{"size":1418,"mtime":1613333292658,"results":"14","hashOfConfig":"9"},{"size":5105,"mtime":1614968064782,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"d203xp",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\index.js",[],["32","33"],"C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\App.js",[],"C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\constants\\apiConstants.js",[],"C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\SignUpSuccess\\SignUpSuccess.js",[],"C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\SignUp\\SignUp.js",["34"],"import React from \"react\";\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport \"./SignUp.css\";\r\nimport logo from \"./../img/logo.png\";\r\nimport  { Link, useHistory } from \"react-router-dom\";\r\nimport ModalComponent from \"./ModalComponent\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport axios from \"axios\";\r\nimport { sha256 } from 'js-sha256';\r\nimport {API_BASE_URL} from '../constants/apiConstants';\r\n\r\nexport function SignUp(props){\r\n    const { register, handleSubmit, errors, watch, setError } = useForm({mode: 'onChange'});\r\n    let history = useHistory();\r\n\r\n    const onSubmit = data => {\r\n        const payload= {\r\n            \"mail\": data.email,\r\n            \"password\": sha256.create().update(data.password).hex(),\r\n        };\r\n        // console.log(payload);\r\n\r\n        axios.post(API_BASE_URL + '/User', payload)\r\n            .then(function (response) {\r\n                if(response.status === 201){\r\n                    history.push(\"/SignUpSuccess\");\r\n                } else {\r\n                    console.log(errors)\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                if (error.response.status === 409) {\r\n                    setError(\"email\", {message: \"Email is already used\"});\r\n                }\r\n            });\r\n    };\r\n\r\n    return(\r\n        <Container fluid className={\"SignUP\"}>\r\n            <Row>\r\n                <Col lg={\"7\"} md={\"7\"} className={\"p-0\"}>\r\n                    <div  className={\"bgSignUp\"}>\r\n                        <div className={\"logoWrap\"}>\r\n                            <img src={logo} alt=\"\"/>\r\n                        </div>\r\n                        <div className={\"headerLeftText\"}>\r\n                            <h1>Lorem Ipsum </h1>\r\n                            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.\r\n                                Consequuntur ex officia officiis possimus.\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n                <Col lg={\"5\"} md={\"5\"} className={\"p-0\"}>\r\n                    <div className={\"headerRightText\"}>\r\n                        <div>\r\n                            <h2>Sign Up</h2>\r\n                        </div>\r\n                        <div>\r\n                            <form onSubmit={handleSubmit(onSubmit)} noValidate autoComplete=\"off\" method={\"post\"}>\r\n                                <Row>\r\n                                    <Col lg={12}>\r\n                                        <input\r\n                                            ref = {register({\r\n                                                required: \"Email is required\",\r\n                                                minLength:{\r\n                                                    value: 10,\r\n                                                    message: \"Min length 10 character.\"\r\n                                                },\r\n                                                maxLength:{\r\n                                                    value: 50,\r\n                                                    message: \"Max length 50 character.\"\r\n                                                },\r\n                                                validate: (value) => {\r\n                                                    return (\r\n                                                        [/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/].every(pattern => pattern.test(value)) ||\r\n                                                        \"Invalid email.\"\r\n                                                    )\r\n                                                }\r\n                                            })}\r\n                                            name={\"email\"}\r\n                                            className={\"input\"}\r\n                                            type=\"email\"\r\n                                            placeholder={\"Email\"}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                {errors.email ? <span>{errors.email.message}</span> : null}\r\n                                <br/>\r\n                                <Row>\r\n                                    <Col lg={12}>\r\n                                        <input\r\n                                            ref = {register({\r\n                                                required: \"Password is required\",\r\n                                                minLength:{\r\n                                                    value: 8,\r\n                                                    message: \"Min length 8 character.\"\r\n                                                },\r\n                                                maxLength:{\r\n                                                    value: 20,\r\n                                                    message: \"Max length 20 character.\"\r\n                                                },\r\n                                                validate: (value) => {\r\n                                                    return (\r\n                                                        [/[a-z]/,/[A-Z]/,/[0-9]/].every(pattern => pattern.test(value)) ||\r\n                                                        \"The password must contain uppercase, lowercase and number.\"\r\n                                                    )\r\n                                                }\r\n                                            })}\r\n                                            name={\"password\"}\r\n                                            className={\"input\"}\r\n                                            type=\"password\"\r\n                                            placeholder={\"Password\"}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                {errors.password ? <span>{errors.password.message}</span> : null}\r\n                                <br/>\r\n                                <Row>\r\n                                    <Col lg={12}>\r\n                                        <input\r\n                                            ref = {register({\r\n                                            required: \"Confirm Password is required\",\r\n                                            validate: value => value === watch('password') ? null : \"Do not match passwords\"\r\n\r\n                                            })}\r\n\r\n                                           name={\"confirmPassword\"}\r\n                                           className={\"input\"}\r\n                                           type=\"password\"\r\n                                           placeholder={\"Confirm Password\"}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                {errors.confirmPassword ? <span>{errors.confirmPassword.message}</span> : null}\r\n                                <br/>\r\n                                <Row>\r\n                                    <Col lg={12}  className={\"d-flex agreeToRules\"}>\r\n                                        <label className={\"m-0\"} >\r\n                                            <input\r\n                                                ref = {register({\r\n                                                required: \"Are you agree\"\r\n                                            })}\r\n                                               name={\"checkedbtn\"}\r\n                                               type=\"checkbox\"\r\n                                            />\r\n                                            I accept the\r\n                                        </label>\r\n                                        <ModalComponent title={\"Terms of Use\"}/> &\r\n                                        <ModalComponent title={\"Privacy Policy\"}/>\r\n\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                {errors.checkedbtn ? <span>{errors.checkedbtn.message}</span> : null}\r\n                                <br/>\r\n                                <br/>\r\n                                <input className={\"input\"} type=\"submit\" value=\"Sign Up\"/>\r\n                            </form>\r\n                        </div>\r\n                        <div className={\"signUpWraper\"}>\r\n                            <p>Already have an account?\r\n                                <Link to=\"/SignIn\"> Sign In</Link>\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\n","C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\SignUp\\ModalComponent.js",[],"C:\\Users\\Viktorya\\Desktop\\alan_turing_school\\src\\SignIn\\SignIn.js",["35","36","37","38","39"],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":76,"column":58,"nodeType":"46","messageId":"47","endLine":76,"endColumn":506},{"ruleId":"48","severity":1,"message":"49","line":5,"column":8,"nodeType":"50","messageId":"51","endLine":5,"endColumn":13},{"ruleId":"48","severity":1,"message":"52","line":9,"column":9,"nodeType":"50","messageId":"51","endLine":9,"endColumn":21},{"ruleId":"48","severity":1,"message":"53","line":12,"column":45,"nodeType":"50","messageId":"51","endLine":12,"endColumn":53},{"ruleId":"48","severity":1,"message":"54","line":13,"column":9,"nodeType":"50","messageId":"51","endLine":13,"endColumn":16},{"ruleId":"55","severity":1,"message":"56","line":92,"column":37,"nodeType":"57","endLine":92,"endColumn":50},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-control-regex","Unexpected control character(s) in regular expression: \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e, \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e.","Literal","unexpected","no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'API_BASE_URL' is defined but never used.","'setError' is assigned a value but never used.","'history' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]